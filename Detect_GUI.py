# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'detect_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
# 3270358948
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from lib.share import shareInfo
from demo.verify import *
from ui.video import *
from demo.reset import *
from ui.update import *

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon, QFont
from PyQt5.QtWidgets import *
import sys

class Ui_MainWindow(QMainWindow):
    def __init__(self):
        super(Ui_MainWindow, self).__init__()
        self.setWindowTitle("基于YOLOv8的检测演示软件V1.0")
        self.resize(1500, 1000)
        self.setStyleSheet("QWidget#centralwidget{background-image: url(ui_img/detect.JPG);}")
        self.centralwidget = QWidget()
        self.centralwidget.setObjectName("centralwidget")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")

        #标题
        self.label_tile = QtWidgets.QLabel(self.centralwidget)
        self.label_tile.setStyleSheet("font: 24pt \"Agency FB\";")
        self.label_tile.setObjectName("label_tile")
        self.verticalLayout_2.addWidget(self.label_tile)
        self.label_tile.setObjectName("label_show_title")

        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")

        # 呈现原始图像
        self.label_yuanshi = QtWidgets.QLabel(self.centralwidget)
        self.label_yuanshi.setEnabled(True)
        self.label_yuanshi.setMinimumSize(QtCore.QSize(400, 300))
        self.label_yuanshi.setMaximumSize(QtCore.QSize(600, 450))
        self.label_yuanshi.setStyleSheet("background-image: url(ui_img/img.png);")
        self.label_yuanshi.setObjectName("label_yuanshi")
        self.gridLayout.addWidget(self.label_yuanshi, 0, 0, 1, 1)

        # 呈现结果图像
        self.label_show = QtWidgets.QLabel(self.centralwidget)
        self.label_show.setMinimumSize(QtCore.QSize(400, 300))
        self.label_show.setMaximumSize(QtCore.QSize(600, 450))
        # self.label_show.setStyleSheet("background-color: rgb(164, 164, 172);")
        self.label_show.setStyleSheet("background-image: url(ui_img/img_1.png);")
        self.label_show.setObjectName("label_show")
        self.gridLayout.addWidget(self.label_show, 0, 1, 1, 1)

        # 呈现修改结果图像
        self.label_reset = QtWidgets.QLabel(self.centralwidget)
        self.label_reset.setMinimumSize(QtCore.QSize(400, 300))
        self.label_reset.setMaximumSize(QtCore.QSize(600, 450))
        # self.label_reset.setStyleSheet("background-color: rgb(164, 164, 172);\n""font: 24pt \"Agency FB\";")
        self.label_reset.setStyleSheet("background-image: url(ui_img/img_2.png);")
        self.label_reset.setObjectName("label_reset")
        self.gridLayout.addWidget(self.label_reset, 1, 1, 1, 1)

        # 呈现编号图像
        self.label_num = QtWidgets.QLabel(self.centralwidget)
        self.label_num.setMinimumSize(QtCore.QSize(400, 300))
        self.label_num.setMaximumSize(QtCore.QSize(600, 450))
        self.label_num.setStyleSheet("background-image: url(ui_img/img_3.png);")
        self.label_num.setObjectName("label_num")
        self.gridLayout.addWidget(self.label_num, 1, 0, 1, 1)

        self.gridLayout.setColumnMinimumWidth(0, 2)
        self.gridLayout.setColumnMinimumWidth(1, 1)
        self.gridLayout.setRowMinimumHeight(0, 2)
        self.gridLayout.setRowMinimumHeight(1, 1)
        self.horizontalLayout.addLayout(self.gridLayout)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")

        #模型选择/检测喷嘴
        self.btn_select = QtWidgets.QPushButton(self.centralwidget)
        self.btn_select.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_select.setObjectName("btn_select")
        self.verticalLayout.addWidget(self.btn_select)
        self.btn_select.clicked.connect(self.seletModels)

        #检测划痕
        self.btn_huahen = QtWidgets.QPushButton(self.centralwidget)
        self.btn_huahen.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_huahen.setObjectName("btn_huahen")
        self.verticalLayout.addWidget(self.btn_huahen)
        self.btn_huahen.clicked.connect(self.seletModels_huahen)

        #图像选择
        self.btn_detect = QtWidgets.QPushButton(self.centralwidget)
        self.btn_detect.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_detect.setObjectName("btn_detect")
        self.verticalLayout.addWidget(self.btn_detect)
        self.btn_detect.clicked.connect(self.openImage)

        #工件编号
        self.btn_num = QtWidgets.QPushButton(self.centralwidget)
        self.btn_num.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_num.setObjectName("btn_num")
        self.verticalLayout.addWidget(self.btn_num)
        self.btn_num.clicked.connect(self.num_image)

        # # 保存结果图像
        # self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        # self.btn_save.setStyleSheet("background-color: rgb(190, 190, 190);")
        # self.btn_save.setObjectName("btn_save")
        # self.verticalLayout.addWidget(self.btn_save)
        # self.btn_save.clicked.connect(self.saveImage)

        # 清除结果图像
        self.btn_clear = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clear.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_clear.setObjectName("btn_clear")
        self.verticalLayout.addWidget(self.btn_clear)
        self.btn_clear.clicked.connect(self.clearImage)

        # 图像修改
        self.btn_update = QtWidgets.QPushButton(self.centralwidget)
        self.btn_update.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_update.setObjectName("btn_update")
        self.verticalLayout.addWidget(self.btn_update)
        self.btn_update.clicked.connect(self.updateImage)

        # 图像导出
        self.btn_reset = QtWidgets.QPushButton(self.centralwidget)
        self.btn_reset.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_reset.setObjectName("btn_reset")
        self.verticalLayout.addWidget(self.btn_reset)
        self.btn_reset.clicked.connect(self.resetImage)

        # 待用
        self.btn_video = QtWidgets.QPushButton(self.centralwidget)
        self.btn_video.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_video.setObjectName("btn_video")
        self.verticalLayout.addWidget(self.btn_video)
        self.btn_video.clicked.connect(self.video)

        #OK/NG数量显示
        self.OK_NG_num = QtWidgets.QTextBrowser(self.centralwidget)
        self.OK_NG_num.setReadOnly(True)
        self.OK_NG_num.setObjectName("OK_NG_num")
        self.verticalLayout.addWidget(self.OK_NG_num)

        # 退出应用
        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setStyleSheet("background-color: rgb(190, 190, 190);")
        self.btn_exit.setObjectName("btn_exit")
        self.verticalLayout.addWidget(self.btn_exit)
        self.btn_exit.clicked.connect(self.exitApp)

        #启动组件
        self.btn_select.raise_()
        self.btn_detect.raise_()
        self.btn_num.raise_()
        # self.btn_save.raise_()
        self.btn_clear.raise_()
        self.btn_update.raise_()
        self.btn_reset.raise_()
        self.btn_exit.raise_()
        self.btn_video.raise_()
        self.label_tile.raise_()
        self.label_yuanshi.raise_()
        self.label_show.raise_()

        self.horizontalLayout.addLayout(self.verticalLayout)
        self.horizontalLayout.setStretch(0, 6)
        self.horizontalLayout.setStretch(1, 1)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)

        #主窗口
        self.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setObjectName("toolBar")
        self.addToolBar(QtCore.Qt.RightToolBarArea, self.toolBar)
        self.retranslateUi(self)
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "基于机器视觉的喷嘴划痕检测系统"))
        self.label_tile.setWhatsThis(_translate("MainWindow", "<html><head/><body><p align=\"center\">基于YOLOv8的检测演示软件V2.0</p></body></html>"))
        self.label_tile.setText(_translate("MainWindow", "<html><head/><body><p align=\"center\"><span style=\" font-size:24pt;\">基于YOLOv8的检测演示软件V1.0</span></p></body></html>"))
        self.btn_select.setText(_translate("MainWindow", "喷嘴检测"))
        self.btn_huahen.setText(_translate("MainWindow", "划痕检测"))
        self.btn_detect.setText(_translate("MainWindow", "图像加载"))
        self.btn_num.setText(_translate("MainWindow", "工件编号"))
        # self.btn_save.setText(_translate("MainWindow", "图片保存"))
        self.btn_clear.setText(_translate("MainWindow", "图片清除"))
        self.btn_update.setText(_translate("MainWindow", "手动修改"))
        self.btn_reset.setText(_translate("MainWindow", "结果重载"))
        self.btn_video.setText(_translate("MainWindow", "视频检测"))
        self.btn_exit.setText(_translate("MainWindow", "应用退出"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))

    # 模型选择函数
    def seletModels(self):
        model , _ = QFileDialog.getOpenFileName(self, '打开文件', 'weights/喷嘴检测模型/best.pt', '图像文件(*.pt)')
        self.openfile_name_model = model
        self.model_type = 0
        if not self.openfile_name_model:
            QMessageBox.warning(self, "Warning:", "打开权重失败", buttons=QMessageBox.Ok, )
        else:
            QMessageBox.information(self, u"喷嘴检测", u"权重打开成功", buttons=QtWidgets.QMessageBox.Ok)

    # 模型选择函数
    def seletModels_huahen(self):
        model , _ = QFileDialog.getOpenFileName(self, '打开文件', 'weights/划痕检测模型/best01.pt', '图像文件(*.pt)')
        self.openfile_name_model = model
        self.model_type = 1
        if not self.openfile_name_model:
            QMessageBox.warning(self, "Warning:", "打开权重失败", buttons=QMessageBox.Ok, )
        else:
            QMessageBox.information(self, u"划痕检测", u"权重打开成功", buttons=QtWidgets.QMessageBox.Ok)

    # 图像选择函数
    def openImage(self):
        fname, _ = QFileDialog.getOpenFileName(self, '打开文件', 'ultralytics/assets', '图像文件(*.jpg)')
        self.fname = fname
        img_path = self.fname
        if not self.fname:
            QMessageBox.warning(self, "Warning:", "打开图片失败", buttons=QMessageBox.Ok, )
        else:
            pixmap = QtGui.QPixmap(fname)
            self.label_yuanshi.setPixmap(pixmap)
            self.label_yuanshi.setScaledContents(True)

            img = cv2.imread(fname)
            self.label_show.setPixmap(opop(self.openfile_name_model,img,img_path))
            self.label_show.setScaledContents(True)

            # 读取包含检测结果的 JSON 文件
            json_file = 'data/JSON/predictions.json'
            with open(json_file, "r") as f:
                data = json.load(f)

            # 初始化计数器
            count_have = 0
            count_not_have = 0

            # 遍历每个图像条目，计算标签为 "have" 和 "not have" 的总数
            for img_info in data:
                label = img_info["label"]
                if label == "have":
                    count_have += 1
                elif label == "not have":
                    count_not_have += 1


            if not self.model_type:
                output_text1 = f"OK: {count_have}"
                output_text2 = f"NG: {count_not_have}"

                html_text = f"""
                                <p style='color: black;'>喷嘴检测：</p>
                                <p style='color: green;'>{output_text1}</p>
                                <p style='color: red;'>{output_text2}</p>
                                """
            else:
                output_text1 = f"OK: {count_not_have}"
                output_text2 = f"NG: {count_have}"

                html_text = f"""
                                <p style='color: black;'>划痕检测：</p>
                                <p style='color: green;'>{output_text1}</p>
                                <p style='color: red;'>{output_text2}</p>
                                """


            font = QFont("Arial", 28)
            self.OK_NG_num.setFont(font)
            self.OK_NG_num.append(html_text)
            return pixmap

    # # 图像保存函数
    # def saveImage(self):
    #     fd, _ = QFileDialog.getSaveFileName(self, "保存图片", ".", "*.jpg")
    #     if not fd:
    #         QMessageBox.warning(self, "Warning:", "保存图片失败", buttons=QMessageBox.Ok, )
    #     else:
    #         self.qImg.save(fd)

    # 图像清除函数
    def clearImage(self):
        result = QMessageBox.question(self, "Warning:", "是否清除本次检测结果", QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes)
        if result == QMessageBox.Yes:
            self.label_yuanshi.clear()
            self.label_show.clear()
            self.label_reset.clear()
            self.label_num.clear()
            self.OK_NG_num.clear()

    # 图像修改函数
    def updateImage(self):
        result = QMessageBox.question(self, "Warning:", "是否修改本次检测结果", QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes)
        if result == QMessageBox.Yes:
            # 所以使用公用变量名
            shareInfo.mainWin = DetectionApp('data/JSON/predictions.json')
            shareInfo.mainWin.show()

    #图像导出函数
    def resetImage(self):

        result = QMessageBox.question(self, "Warning:", "是否显示本次修改结果", QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes)
        if result == QMessageBox.Yes:
            json_file = 'data/JSON/predictions.json'
            output_path = draw_labels_on_image(json_file)
            annotate_image = QtGui.QPixmap(output_path)
            self.label_reset.setPixmap(annotate_image)
            self.label_reset.setScaledContents(True)

            # 读取包含检测结果的 JSON 文件
            json_file = 'data/JSON/predictions.json'
            with open(json_file, "r") as f:
                data = json.load(f)

            # 初始化计数器
            count_have = 0
            count_not_have = 0

            # 遍历每个图像条目，计算标签为 "have" 和 "not have" 的总数
            for img_info in data:
                label = img_info["label"]
                if label == "have":
                    count_have += 1
                elif label == "not have":
                    count_not_have += 1


            if not self.model_type:
                output_text1 = f"OK: {count_have}"
                output_text2 = f"NG: {count_not_have}"

                html_text = f"""
                                <p style='color: black;'>修改结果：</p>
                                <p style='color: green;'>{output_text1}</p>
                                <p style='color: red;'>{output_text2}</p>
                                """
            else:
                output_text1 = f"OK: {count_not_have}"
                output_text2 = f"NG: {count_have}"

                html_text = f"""
                                <p style='color: black;'>修改结果：</p>
                                <p style='color: green;'>{output_text1}</p>
                                <p style='color: red;'>{output_text2}</p>
                                """


            font = QFont("Arial", 28)
            self.OK_NG_num.setFont(font)
            self.OK_NG_num.append(html_text)    #图像导出函数


    #工件编号
    def num_image(self):

        result = QMessageBox.question(self, "Warning:", "是否编号", QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes)
        if result == QMessageBox.Yes:
            json_file = 'data/JSON/predictions.json'
            output_path = draw_labels_on_image(json_file)
            annotate_image = QtGui.QPixmap(output_path)
            self.label_num.setPixmap(annotate_image)
            self.label_num.setScaledContents(True)


    # 视频识别函数
    def video(self):
        video, _ = QFileDialog.getOpenFileName(self, '打开文件', 'ultralytics/assets', '视频文件(*.mp4)')
        self.video = video
        if not self.video:
            QMessageBox.warning(self, "Warning:", "打开视频失败", buttons=QMessageBox.Ok, )
        else:
            shareInfo.mainWin = VideoWindow(video,self.openfile_name_model)
            shareInfo.mainWin.show()

    # 应用退出函数
    def exitApp(self, event):
        event = QApplication.instance()
        result = QMessageBox.question(self, "Notice:", "您真的要退出此应用吗", QMessageBox.Yes | QMessageBox.No,
                                      QMessageBox.Yes)
        if result == QMessageBox.Yes:
            event.quit()



if __name__ == '__main__':
    app = QApplication(sys.argv)
    app.setWindowIcon(QIcon('ui_img/icon.png'))
    ui = Ui_MainWindow()
    ui.show()
    sys.exit(app.exec_())

